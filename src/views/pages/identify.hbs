<div class="flower-app-identify">
    <div class="flower-header small">
        <h1>Identify a Flower</h1>
        <p class="tagline">Take a clear photo of a flower to identify it</p>
    </div>
    
    <div class="camera-container">
        <!-- Camera view -->
        <div id="camera-view">
            <video id="camera-stream" autoplay playsinline></video>
            
            <div class="camera-options">
                <button id="start-camera" class="btn-primary">
                    <i class="fa fa-camera"></i> Enable Camera
                </button>
                
                <div class="option-divider">
                    <span>OR</span>
                </div>
                
                <label for="file-upload" class="btn-secondary file-upload-btn">
                    <i class="fa fa-upload"></i> Upload Photo
                </label>
                <input type="file" id="file-upload" accept="image/*" style="display: none;">
            </div>
            
            <div id="camera-status"></div>
            <button id="capture-btn" class="capture-button hidden">
                <div class="capture-icon"></div>
            </button>
        </div>
        
        <!-- Photo preview -->
        <div id="photo-preview" class="hidden">
            <canvas id="photo-canvas"></canvas>
            <div class="preview-controls">
                <button id="retake-btn" class="btn-outline">
                    <i class="fa fa-redo"></i> Retake
                </button>
                <button id="save-btn" class="btn-primary">
                    <i class="fa fa-save"></i> Save Photo
                </button>
            </div>
        </div>
    </div>
    
    <div class="bottom-nav">
        <a href="/home" class="bottom-nav-item">
            <i class="fa fa-home"></i>
            <span>Home</span>
        </a>
        <a href="/identify" class="bottom-nav-item add-button active">
            <div class="add-icon">
                <i class="fa fa-plus"></i>
            </div>
        </a>
        <a href="/profile" class="bottom-nav-item">
            <i class="fa fa-user"></i>
            <span>Profile</span>
        </a>
    </div>
</div>

<script>
// Inline script for maximum compatibility
document.addEventListener('DOMContentLoaded', function() {
    // Add this line to check if user is authenticated from the server-side template
    const isAuthenticated = {{#if user}}true{{else}}false{{/if}};
    console.log('Authentication status:', isAuthenticated ? 'Logged in' : 'Not logged in');
    
    const videoElement = document.getElementById('camera-stream');
    const startButton = document.getElementById('start-camera');
    const statusDiv = document.getElementById('camera-status');
    const captureBtn = document.getElementById('capture-btn');
    const photoPreview = document.getElementById('photo-preview');
    const cameraView = document.getElementById('camera-view');
    const photoCanvas = document.getElementById('photo-canvas');
    const retakeBtn = document.getElementById('retake-btn');
    const saveBtn = document.getElementById('save-btn');
    const fileUpload = document.getElementById('file-upload');
    
    let stream = null;
    let photoData = null;
    let userLatitude = null;
    let userLongitude = null;
    
    // Initially hide the video until camera starts
    videoElement.style.display = 'none';
    captureBtn.classList.add('hidden');
    
    // Function to update status
    function updateStatus(message, isError = false) {
        statusDiv.textContent = message;
        statusDiv.style.color = isError ? 'red' : 'green';
        console.log(message);
    }
    
    // Get the user's location when the page loads
    function getUserLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    userLatitude = position.coords.latitude;
                    userLongitude = position.coords.longitude;
                    console.log(`Location obtained: (${userLatitude}, ${userLongitude})`);
                    updateStatus('Location detected');
                },
                function(error) {
                    console.log('Error getting location:', error);
                    updateStatus('Location not available', true);
                }
            );
        } else {
            console.log('Geolocation is not supported by this browser');
        }
    }

    // Call this when the page loads
    getUserLocation();
    
    // Start camera when button is clicked
    startButton.addEventListener('click', function() {
        updateStatus('Requesting camera access...');
        
        // Simple camera request
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ 
                video: { 
                    facingMode: 'environment',  // Prefer rear camera
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                } 
            })
                .then(function(streamObj) {
                    stream = streamObj;
                    videoElement.srcObject = stream;
                    videoElement.style.display = 'block';
                    
                    // Hide the camera options
                    document.querySelector('.camera-options').style.display = 'none';
                    
                    captureBtn.classList.remove('hidden');
                    updateStatus('Camera active');
                    
                    // Log success
                    console.log('Camera successfully started');
                })
                .catch(function(err) {
                    updateStatus('Camera error: ' + err.name + ' - ' + err.message, true);
                    console.error('Camera error:', err);
                });
        } else {
            updateStatus('Your browser does not support camera access', true);
        }
    });
    
    // Handle file upload
    fileUpload.addEventListener('change', function(e) {
        if (!e.target.files.length) return;
        
        const file = e.target.files[0];
        
        // Check if file is an image
        if (!file.type.startsWith('image/')) {
            updateStatus('Please select an image file', true);
            return;
        }
        
        updateStatus('Processing uploaded image...');
        
        // Read the file as data URL
        const reader = new FileReader();
        
        reader.onload = function(event) {
            // Create an image element to get dimensions
            const img = new Image();
            
            img.onload = function() {
                // Get the uploaded image dimensions
                const context = photoCanvas.getContext('2d');
                photoCanvas.width = img.width;
                photoCanvas.height = img.height;
                
                // Draw the image to canvas
                context.drawImage(img, 0, 0);
                
                // Save the photo data
                photoData = photoCanvas.toDataURL('image/jpeg');
                
                // Show preview
                cameraView.classList.add('hidden');
                photoPreview.classList.remove('hidden');
                
                updateStatus('Image uploaded successfully');
                
                // Clear the file input for future uploads
                fileUpload.value = '';
            };
            
            img.src = event.target.result;
            
            // Also save this as our photo data in case canvas processing fails
            photoData = event.target.result;
        };
        
        reader.onerror = function() {
            updateStatus('Error reading file', true);
        };
        
        reader.readAsDataURL(file);
    });
    
    // Capture photo
    captureBtn.addEventListener('click', function() {
        if (!stream) {
            updateStatus('Camera not active', true);
            return;
        }
        
        try {
            // Create canvas and draw the current video frame
            const context = photoCanvas.getContext('2d');
            photoCanvas.width = videoElement.videoWidth;
            photoCanvas.height = videoElement.videoHeight;
            context.drawImage(videoElement, 0, 0, photoCanvas.width, photoCanvas.height);
            
            // Save the photo data
            photoData = photoCanvas.toDataURL('image/jpeg');
            console.log("Captured photo data:", photoData.substring(0, 50) + "...");
            
            // Show preview
            cameraView.classList.add('hidden');
            photoPreview.classList.remove('hidden');
            
            // Stop the camera stream
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
            }
            
            updateStatus('Photo captured');
        } catch (error) {
            updateStatus('Error capturing photo: ' + error.message, true);
            console.error('Capture error:', error);
        }
    });
    
    // Retake photo
    retakeBtn.addEventListener('click', function() {
        // Hide preview and show camera
        photoPreview.classList.add('hidden');
        cameraView.classList.remove('hidden');
        
        // Show camera options again
        document.querySelector('.camera-options').style.display = 'flex';
        
        // Reset video and buttons
        videoElement.style.display = 'none';
        captureBtn.classList.add('hidden');
        
        updateStatus('Ready to take a new photo');
    });
    
    // Save photo
    saveBtn.addEventListener('click', function() {
        if (!photoData) {
            updateStatus('No photo to save', true);
            return;
        }
        
        updateStatus('Saving photo...');
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Saving...';
        
        // Save the photo to the server with location data
        fetch('/api/save-photo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                image: photoData,
                name: 'Captured Flower',
                latitude: userLatitude,
                longitude: userLongitude
            })
        })
        .then(response => {
            console.log('Photo save response status:', response.status);
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(`HTTP error! status: ${response.status}, body: ${text}`);
                });
            }
            return response.json();
        })
        .then(data => {
            console.log('Photo saved successfully:', data);
            
            // Show identification message
            if (data.flowerName) {
                const confidencePercent = data.confidence ? Math.round(data.confidence * 100) : null;
                const confidenceText = confidencePercent ? ` (${confidencePercent}% confidence)` : '';
                
                updateStatus(`Identified as: ${data.flowerName}${confidenceText}!`);
                
                // Create a success message with the flower name
                const successMessage = document.createElement('div');
                successMessage.className = 'success-message';
                
                // Use the client-side isAuthenticated variable instead of data.savedToCollection
                if (isAuthenticated && data.savedToCollection) {
                    successMessage.innerHTML = `
                        <div class="success-icon">✓</div>
                        <div class="success-text">
                            <h3>Flower Identified!</h3>
                            <p>This appears to be a <strong>${data.flowerName}</strong>${confidenceText}</p>
                            <p class="small-text">Saved to your collection</p>
                        </div>
                    `;
                } else if (isAuthenticated) {
                    successMessage.innerHTML = `
                        <div class="success-icon">✓</div>
                        <div class="success-text">
                            <h3>Flower Identified!</h3>
                            <p>This appears to be a <strong>${data.flowerName}</strong>${confidenceText}</p>
                            <p class="small-text">Error saving to collection - please try again</p>
                        </div>
                    `;
                } else {
                    successMessage.innerHTML = `
                        <div class="success-icon">✓</div>
                        <div class="success-text">
                            <h3>Flower Identified!</h3>
                            <p>This appears to be a <strong>${data.flowerName}</strong>${confidenceText}</p>
                            <p class="small-text">Log in to save this to your collection!</p>
                        </div>
                    `;
                }
                
                // Insert before the preview controls
                photoPreview.insertBefore(successMessage, document.querySelector('.preview-controls'));
                
                // For anonymous users, add login/register button
                if (!isAuthenticated) {
                    const loginButtons = document.createElement('div');
                    loginButtons.className = 'login-prompt';
                    loginButtons.innerHTML = `
                        <a href="/login" class="btn-secondary">Login</a>
                        <a href="/register" class="btn-primary">Sign Up</a>
                    `;
                    photoPreview.insertBefore(loginButtons, document.querySelector('.preview-controls'));
                }
            } else {
                updateStatus('Photo saved successfully!');
            }

            // Redirect after a delay (for authenticated users) or show login options
            if (isAuthenticated) {
                setTimeout(() => {
                    window.location.href = '/profile';
                }, 3000);
            } else {
                // For anonymous users, update save button to allow retry
                saveBtn.disabled = false;
                saveBtn.innerHTML = '<i class="fa fa-save"></i> Save Photo';
                retakeBtn.innerHTML = '<i class="fa fa-redo"></i> New Photo';
            }
        })
        .catch(error => {
            updateStatus('Error: ' + error.message, true);
            console.error('Save error:', error);
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<i class="fa fa-save"></i> Save Photo';
        });
    });
});
</script>

<style>
/* Inline styles for simplicity */
.camera-container {
    position: relative;
    width: 100%;
    height: 70vh;
    background-color: #000;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    border-radius: 10px;
    margin-bottom: 20px;
}

#camera-view {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

#camera-stream {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.camera-options {
    display: flex;
    flex-direction: column;
    gap: 20px;
    align-items: center;
    padding: 20px;
    background-color: rgba(0,0,0,0.7);
    border-radius: 12px;
    max-width: 80%;
    z-index: 10;
}

.option-divider {
    display: flex;
    align-items: center;
    width: 100%;
    margin: 5px 0;
}

.option-divider::before,
<option-divider::after {
    content: '';
    flex: 1;
    border-bottom: 1px solid rgba(255,255,255,0.3);
}

.option-divider span {
    padding: 0 10px;
    color: white;
    font-size: 14px;
}

.file-upload-btn {
    cursor: pointer;
    width: 100%;
    text-align: center;
}

#camera-status {
    position: absolute;
    bottom: 20px;
    background-color: rgba(0,0,0,0.7);
    color: white;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 14px;
    z-index: 10;
}

.capture-button {
    position: absolute;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    width: 70px;
    height: 70px;
    border-radius: 50%;
    background-color: white;
    border: none;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
}

.capture-icon {
    width: 54px;
    height: 54px;
    border-radius: 50%;
    border: 3px solid #333;
    background-color: white;
    transition: all 0.2s ease;
}

.capture-button:active .capture-icon {
    width: 48px;
    height: 48px;
}

#photo-preview {
    position: relative;
    width: 100%;
    height: 100%;
}

#photo-canvas {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background-color: #000;
}

.preview-controls {
    position: absolute;
    bottom: 20px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-around;
    padding: 0 20px;
}

.preview-controls button {
    padding: 10px 20px;
    font-size: 16px;
}

.hidden {
    display: none !important;
}

/* Add styles for login prompt */
.login-prompt {
    position: absolute;
    bottom: 80px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    gap: 15px;
    padding: 0 20px;
}

.login-prompt a {
    flex: 1;
    text-align: center;
    max-width: 150px;
}
</style>